// import React, { useState, useEffect, useRef } from 'react';
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Animated, Easing, Alert, Platform, PermissionsAndroid } from 'react-native';
// import { FlatList } from 'react-native';
// import { useNavigation } from '@react-navigation/native';
// import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
// import { BleManager } from 'react-native-ble-plx';

// const bleManager = new BleManager();

// const Header = (props) => {
//   const navigation = useNavigation();
//   const [isConnected, setIsConnected] = useState(false);
//   const [showAllDevices, setShowAllDevices] = useState(false);
//   const [log, setLog] = useState([]);
//   const [scanning, setScanning] = useState(false);
//   const [devices, setDevices] = useState([]);
//   const [error, setError] = useState(null);
//   const [colorScheme, setColorScheme] = useState('light');
//   const scanAnimation = useRef(new Animated.Value(0)).current;

//   useEffect(() => {
//     requestPermissions();
//     checkBluetoothStatus();

//     const handleStateChange = (state) => {
//       if (state !== "StatePoweredOn") {
//         Alert.alert(
//           "Bluetooth is off",
//           "Please enable Bluetooth to use this feature.",
//           [{ text: "OK" }]
//         );
//       }
//     };

//     const subscription = bleManager.onStateChange(handleStateChange, true);

//     return () => {
//       subscription.remove();
//       bleManager.stopDeviceScan();
//     };
//   }, []);

//   useEffect(() => {
//     if (scanning) {
//       startScanningAnimation();
//     } else {
//       scanAnimation.stopAnimation();
//     }
//   }, [scanning]);

//   const requestPermissions = async () => {
//     if (Platform.OS === "android") {
//       try {
//         const granted = await PermissionsAndroid.requestMultiple([
//           PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
//           PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
//           PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
//           PermissionsAndroid.PERMISSIONS.BLUETOOTH_ADVERTISE,
//         ]);

//         if (
//           granted["android.permission.ACCESS_FINE_LOCATION"] ===
//             PermissionsAndroid.RESULTS.GRANTED &&
//           granted["android.permission.BLUETOOTH_SCAN"] ===
//             PermissionsAndroid.RESULTS.GRANTED &&
//           granted["android.permission.BLUETOOTH_CONNECT"] ===
//             PermissionsAndroid.RESULTS.GRANTED &&
//           granted["android.permission.BLUETOOTH_ADVERTISE"] ===
//             PermissionsAndroid.RESULTS.GRANTED
//         ) {
//           console.log("All permissions granted");
//         } else {
//           console.log("Permissions denied");
//         }
//       } catch (err) {
//         console.warn(err);
//       }
//     }
//   };

//   const checkBluetoothStatus = async () => {
//     const state = await bleManager.state();
//     if (state !== "StatePoweredOn") {
//       Alert.alert(
//         "Bluetooth is off",
//         "Please enable Bluetooth to use this feature.",
//         [{ text: "OK" }]
//       );
//     }
//   };

//   const startScanningAnimation = () => {
//     scanAnimation.setValue(0);
//     Animated.loop(
//       Animated.timing(scanAnimation, {
//         toValue: 1,
//         duration: 2000,
//         easing: Easing.linear,
//         useNativeDriver: true,
//       })
//     ).start();
//   };

//   const scanDevices = () => {
//     setScanning(true);
//     setDevices([]);
//     setError(null);

//     bleManager.startDeviceScan(null, null, (error, device) => {
//       if (error) {
//         setError(error.message);
//         setScanning(false);
//         return;
//       }

//       setDevices((prevDevices) => {
//         const existingDevice = prevDevices.find((d) => d.id === device.id);
//         if (existingDevice) {
//           return prevDevices.map((d) =>
//             d.id === device.id ? { ...d, rssi: device.rssi } : d
//           );
//         } else {
//           return [...prevDevices, device];
//         }
//       });
//     });

//     setTimeout(() => {
//       bleManager.stopDeviceScan();
//       setScanning(false);
//     }, 10000);
//   };

//   const handleDevicePress = (device) => {
//     navigation.navigate("Ota", { device });
//   };

//   const getManufacturerIcon = (name) => {
//     return name ? "bluetooth" : "bluetooth-off";
//   };

//   const connection = async () => {
//     console.log('Requesting Bluetooth Device...');
//     try {
//       const device = await navigator.bluetooth.requestDevice({
//         filters: showAllDevices ? [] : [
//           { namePrefix: "HT_" },
//           { namePrefix: "HR_" },
//           { namePrefix: "p2pS_" },
//           { namePrefix: "P2PS_" },
//           { namePrefix: "p2pR_" },
//           { namePrefix: "p2pSext_" },
//           { namePrefix: "DT" }
//         ],
//         optionalServices: [
//           '0000fe40-cc7a-482a-984a-7f2ed5b3e58f',
//           '0000180d-0000-1000-8000-00805f9b34fb',
//           '0000fe80-cc7a-482a-984a-7f2ed5b3e58f',
//           '0000fe80-8e22-4541-9d4c-21edae82fe80',
//           '0000fe20-cc7a-482a-984a-7f2ed5b3e58f',
//           '0000feb0-cc7a-482a-984a-7f2ed5b3e58f',
//           '00001809-0000-1000-8000-00805f9b34fb'
//         ]
//       });

//       const server = await device.gatt.connect();
//       const services = await server.getPrimaryServices();

//       console.log('HEADER - Getting Characteristics...');
//       let queue = Promise.resolve();
//       services.forEach(service => {
//         props.setAllServices(prevService => [
//           ...prevService,
//           { service }
//         ]);
//         queue = queue.then(() => service.getCharacteristics()
//           .then(characteristics => {
//             characteristics.forEach(characteristic => {
//               props.setAllCharacteristics(prevChar => [
//                 ...prevChar,
//                 { characteristic }
//               ]);
//             });
//           }));
//       });
//       setIsConnected(true);
//     } catch (error) {
//       console.error(error);
//     }
//   };

//   const disconnection = () => {
//     console.log('HEADER - Disconnecting from Bluetooth Device...');
//     if (myDevice) {
//       myDevice.gatt.disconnect();
//       setIsConnected(false);
//     }
//   };

//   return (
//     <ScrollView style={styles.container}>
//       <View style={styles.header}>
//         <Text style={styles.title}>Bluetooth Devices</Text>
//         <TouchableOpacity onPress={() => setShowAllDevices(prev => !prev)}>
//           <Text style={styles.filter}>{showAllDevices ? 'Show Filtered' : 'Show All'}</Text>
//         </TouchableOpacity>
//         <TouchableOpacity onPress={connection} style={styles.button}>
//           <Icon name="bluetooth" size={24} color="#000" />
//         </TouchableOpacity>
//         <TouchableOpacity onPress={disconnection} style={styles.button}>
//           <Icon name="bluetooth-off" size={24} color="#000" />
//         </TouchableOpacity>
//       </View>
//       <View style={styles.body}>
//         {scanning ? (
//           <Animated.View style={{ opacity: scanAnimation }}>
//             <Text>Scanning...</Text>
//           </Animated.View>
//         ) : (
//           <TouchableOpacity onPress={scanDevices} style={styles.button}>
//             <Text>Scan Devices</Text>
//           </TouchableOpacity>
//         )}
//         {devices.length > 0 && (
//           <FlatList
//             data={devices}
//             renderItem={({ item }) => (
//               <TouchableOpacity onPress={() => handleDevicePress(item)} style={styles.device}>
//                 <Text>{item.name || 'Unnamed Device'}</Text>
//                 <Text>RSSI: {item.rssi}</Text>
//                 <Icon name={getManufacturerIcon(item.name)} size={24} color="#000" />
//               </TouchableOpacity>
//             )}
//             keyExtractor={item => item.id}
//           />
//         )}
//         {error && <Text style={styles.error}>{error}</Text>}
//       </View>
//     </ScrollView>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   header: {
//     padding: 16,
//     backgroundColor: '#f0f0f0',
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//   },
//   title: {
//     fontSize: 18,
//     fontWeight: 'bold',
//   },
//   filter: {
//     fontSize: 16,
//     color: '#007bff',
//   },
//   button: {
//     margin: 8,
//   },
//   body: {
//     padding: 16,
//   },
//   device: {
//     padding: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: '#ddd',
//   },
//   error: {
//     color: 'red',
//   },
// });

// export default Header;
